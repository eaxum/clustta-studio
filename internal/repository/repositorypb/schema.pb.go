// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: internal/repository/schema.proto

package repositorypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	AddedAt       string                 `protobuf:"bytes,3,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	FirstName     string                 `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string                 `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Photo         []byte                 `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	RoleId        string                 `protobuf:"bytes,9,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Synced        bool                   `protobuf:"varint,10,opt,name=synced,proto3" json:"synced,omitempty"`
	Role          string                 `protobuf:"bytes,11,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_internal_repository_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *User) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *User) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *User) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type EntityType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Synced        bool                   `protobuf:"varint,5,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityType) Reset() {
	*x = EntityType{}
	mi := &file_internal_repository_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityType) ProtoMessage() {}

func (x *EntityType) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityType.ProtoReflect.Descriptor instead.
func (*EntityType) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{1}
}

func (x *EntityType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EntityType) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *EntityType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityType) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *EntityType) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type TaskType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Synced        bool                   `protobuf:"varint,5,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskType) Reset() {
	*x = TaskType{}
	mi := &file_internal_repository_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskType) ProtoMessage() {}

func (x *TaskType) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskType.ProtoReflect.Descriptor instead.
func (*TaskType) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{2}
}

func (x *TaskType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskType) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *TaskType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskType) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TaskType) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Extension     string                 `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`
	IsResource    bool                   `protobuf:"varint,7,opt,name=is_resource,json=isResource,proto3" json:"is_resource,omitempty"`
	StatusId      string                 `protobuf:"bytes,8,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	TaskTypeId    string                 `protobuf:"bytes,9,opt,name=task_type_id,json=taskTypeId,proto3" json:"task_type_id,omitempty"`
	EntityId      string                 `protobuf:"bytes,10,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	AssigneeId    string                 `protobuf:"bytes,11,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	AssignerId    string                 `protobuf:"bytes,12,opt,name=assigner_id,json=assignerId,proto3" json:"assigner_id,omitempty"`
	IsLink        bool                   `protobuf:"varint,13,opt,name=is_link,json=isLink,proto3" json:"is_link,omitempty"`
	Pointer       string                 `protobuf:"bytes,14,opt,name=pointer,proto3" json:"pointer,omitempty"`
	PreviewId     string                 `protobuf:"bytes,15,opt,name=preview_id,json=previewId,proto3" json:"preview_id,omitempty"`
	Trashed       bool                   `protobuf:"varint,16,opt,name=trashed,proto3" json:"trashed,omitempty"`
	Synced        bool                   `protobuf:"varint,17,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_internal_repository_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Task) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *Task) GetIsResource() bool {
	if x != nil {
		return x.IsResource
	}
	return false
}

func (x *Task) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *Task) GetTaskTypeId() string {
	if x != nil {
		return x.TaskTypeId
	}
	return ""
}

func (x *Task) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Task) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *Task) GetAssignerId() string {
	if x != nil {
		return x.AssignerId
	}
	return ""
}

func (x *Task) GetIsLink() bool {
	if x != nil {
		return x.IsLink
	}
	return false
}

func (x *Task) GetPointer() string {
	if x != nil {
		return x.Pointer
	}
	return ""
}

func (x *Task) GetPreviewId() string {
	if x != nil {
		return x.PreviewId
	}
	return ""
}

func (x *Task) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *Task) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Entity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	EntityPath    string                 `protobuf:"bytes,5,opt,name=entity_path,json=entityPath,proto3" json:"entity_path,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Trashed       bool                   `protobuf:"varint,7,opt,name=trashed,proto3" json:"trashed,omitempty"`
	EntityTypeId  string                 `protobuf:"bytes,8,opt,name=entity_type_id,json=entityTypeId,proto3" json:"entity_type_id,omitempty"`
	ParentId      string                 `protobuf:"bytes,9,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	PreviewId     string                 `protobuf:"bytes,10,opt,name=preview_id,json=previewId,proto3" json:"preview_id,omitempty"`
	Synced        bool                   `protobuf:"varint,11,opt,name=synced,proto3" json:"synced,omitempty"`
	IsLibrary     bool                   `protobuf:"varint,12,opt,name=is_library,json=isLibrary,proto3" json:"is_library,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_internal_repository_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Entity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Entity) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Entity) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Entity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entity) GetEntityPath() string {
	if x != nil {
		return x.EntityPath
	}
	return ""
}

func (x *Entity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Entity) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *Entity) GetEntityTypeId() string {
	if x != nil {
		return x.EntityTypeId
	}
	return ""
}

func (x *Entity) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Entity) GetPreviewId() string {
	if x != nil {
		return x.PreviewId
	}
	return ""
}

func (x *Entity) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

func (x *Entity) GetIsLibrary() bool {
	if x != nil {
		return x.IsLibrary
	}
	return false
}

type EntityAssignee struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	EntityId      string                 `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	AssigneeId    string                 `protobuf:"bytes,4,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	AssignerId    string                 `protobuf:"bytes,5,opt,name=assigner_id,json=assignerId,proto3" json:"assigner_id,omitempty"`
	Synced        bool                   `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityAssignee) Reset() {
	*x = EntityAssignee{}
	mi := &file_internal_repository_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityAssignee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityAssignee) ProtoMessage() {}

func (x *EntityAssignee) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityAssignee.ProtoReflect.Descriptor instead.
func (*EntityAssignee) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{5}
}

func (x *EntityAssignee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EntityAssignee) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *EntityAssignee) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EntityAssignee) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *EntityAssignee) GetAssignerId() string {
	if x != nil {
		return x.AssignerId
	}
	return ""
}

func (x *EntityAssignee) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type TaskDependency struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime            int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	TaskId           string                 `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DependencyId     string                 `protobuf:"bytes,4,opt,name=dependency_id,json=dependencyId,proto3" json:"dependency_id,omitempty"`
	DependencyTypeId string                 `protobuf:"bytes,5,opt,name=dependency_type_id,json=dependencyTypeId,proto3" json:"dependency_type_id,omitempty"`
	Synced           bool                   `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskDependency) Reset() {
	*x = TaskDependency{}
	mi := &file_internal_repository_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDependency) ProtoMessage() {}

func (x *TaskDependency) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDependency.ProtoReflect.Descriptor instead.
func (*TaskDependency) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{6}
}

func (x *TaskDependency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskDependency) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *TaskDependency) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskDependency) GetDependencyId() string {
	if x != nil {
		return x.DependencyId
	}
	return ""
}

func (x *TaskDependency) GetDependencyTypeId() string {
	if x != nil {
		return x.DependencyTypeId
	}
	return ""
}

func (x *TaskDependency) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type EntityDependency struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime            int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	TaskId           string                 `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DependencyId     string                 `protobuf:"bytes,4,opt,name=dependency_id,json=dependencyId,proto3" json:"dependency_id,omitempty"`
	DependencyTypeId string                 `protobuf:"bytes,5,opt,name=dependency_type_id,json=dependencyTypeId,proto3" json:"dependency_type_id,omitempty"`
	Synced           bool                   `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EntityDependency) Reset() {
	*x = EntityDependency{}
	mi := &file_internal_repository_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDependency) ProtoMessage() {}

func (x *EntityDependency) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDependency.ProtoReflect.Descriptor instead.
func (*EntityDependency) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{7}
}

func (x *EntityDependency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EntityDependency) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *EntityDependency) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *EntityDependency) GetDependencyId() string {
	if x != nil {
		return x.DependencyId
	}
	return ""
}

func (x *EntityDependency) GetDependencyTypeId() string {
	if x != nil {
		return x.DependencyTypeId
	}
	return ""
}

func (x *EntityDependency) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Workflow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Synced        bool                   `protobuf:"varint,4,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_internal_repository_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type WorkflowTask struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime            int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId       string                 `protobuf:"bytes,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	IsResource       bool                   `protobuf:"varint,5,opt,name=is_resource,json=isResource,proto3" json:"is_resource,omitempty"`
	WorkflowId       string                 `protobuf:"bytes,6,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	TaskTypeId       string                 `protobuf:"bytes,7,opt,name=task_type_id,json=taskTypeId,proto3" json:"task_type_id,omitempty"`
	WorkflowEntityId string                 `protobuf:"bytes,8,opt,name=workflow_entity_id,json=workflowEntityId,proto3" json:"workflow_entity_id,omitempty"`
	IsLink           bool                   `protobuf:"varint,9,opt,name=is_link,json=isLink,proto3" json:"is_link,omitempty"`
	Pointer          string                 `protobuf:"bytes,10,opt,name=pointer,proto3" json:"pointer,omitempty"`
	Synced           bool                   `protobuf:"varint,11,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkflowTask) Reset() {
	*x = WorkflowTask{}
	mi := &file_internal_repository_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTask) ProtoMessage() {}

func (x *WorkflowTask) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTask.ProtoReflect.Descriptor instead.
func (*WorkflowTask) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{9}
}

func (x *WorkflowTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowTask) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *WorkflowTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowTask) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *WorkflowTask) GetIsResource() bool {
	if x != nil {
		return x.IsResource
	}
	return false
}

func (x *WorkflowTask) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowTask) GetTaskTypeId() string {
	if x != nil {
		return x.TaskTypeId
	}
	return ""
}

func (x *WorkflowTask) GetWorkflowEntityId() string {
	if x != nil {
		return x.WorkflowEntityId
	}
	return ""
}

func (x *WorkflowTask) GetIsLink() bool {
	if x != nil {
		return x.IsLink
	}
	return false
}

func (x *WorkflowTask) GetPointer() string {
	if x != nil {
		return x.Pointer
	}
	return ""
}

func (x *WorkflowTask) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type WorkflowEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowId    string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	EntityTypeId  string                 `protobuf:"bytes,5,opt,name=entity_type_id,json=entityTypeId,proto3" json:"entity_type_id,omitempty"`
	ParentId      string                 `protobuf:"bytes,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Synced        bool                   `protobuf:"varint,7,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowEntity) Reset() {
	*x = WorkflowEntity{}
	mi := &file_internal_repository_schema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowEntity) ProtoMessage() {}

func (x *WorkflowEntity) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowEntity.ProtoReflect.Descriptor instead.
func (*WorkflowEntity) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowEntity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowEntity) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *WorkflowEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowEntity) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowEntity) GetEntityTypeId() string {
	if x != nil {
		return x.EntityTypeId
	}
	return ""
}

func (x *WorkflowEntity) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *WorkflowEntity) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type WorkflowLink struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime              int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EntityTypeId       string                 `protobuf:"bytes,4,opt,name=entity_type_id,json=entityTypeId,proto3" json:"entity_type_id,omitempty"`
	WorkflowId         string                 `protobuf:"bytes,5,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	LinkedWorkflowId   string                 `protobuf:"bytes,6,opt,name=linked_workflow_id,json=linkedWorkflowId,proto3" json:"linked_workflow_id,omitempty"`
	LinkedWorkflowName string                 `protobuf:"bytes,7,opt,name=linked_workflow_name,json=linkedWorkflowName,proto3" json:"linked_workflow_name,omitempty"`
	Synced             bool                   `protobuf:"varint,8,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WorkflowLink) Reset() {
	*x = WorkflowLink{}
	mi := &file_internal_repository_schema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowLink) ProtoMessage() {}

func (x *WorkflowLink) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowLink.ProtoReflect.Descriptor instead.
func (*WorkflowLink) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowLink) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *WorkflowLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowLink) GetEntityTypeId() string {
	if x != nil {
		return x.EntityTypeId
	}
	return ""
}

func (x *WorkflowLink) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowLink) GetLinkedWorkflowId() string {
	if x != nil {
		return x.LinkedWorkflowId
	}
	return ""
}

func (x *WorkflowLink) GetLinkedWorkflowName() string {
	if x != nil {
		return x.LinkedWorkflowName
	}
	return ""
}

func (x *WorkflowLink) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type DependencyType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Synced        bool                   `protobuf:"varint,4,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DependencyType) Reset() {
	*x = DependencyType{}
	mi := &file_internal_repository_schema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DependencyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyType) ProtoMessage() {}

func (x *DependencyType) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyType.ProtoReflect.Descriptor instead.
func (*DependencyType) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{12}
}

func (x *DependencyType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DependencyType) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *DependencyType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DependencyType) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ShortName     string                 `protobuf:"bytes,4,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Color         string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Synced        bool                   `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_internal_repository_schema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{13}
}

func (x *Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Status) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Status) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Status) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Status) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Synced        bool                   `protobuf:"varint,4,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_internal_repository_schema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{14}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type TaskTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	TaskId        string                 `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TagId         string                 `protobuf:"bytes,4,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Synced        bool                   `protobuf:"varint,5,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskTag) Reset() {
	*x = TaskTag{}
	mi := &file_internal_repository_schema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTag) ProtoMessage() {}

func (x *TaskTag) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTag.ProtoReflect.Descriptor instead.
func (*TaskTag) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{15}
}

func (x *TaskTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskTag) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *TaskTag) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskTag) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *TaskTag) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Checkpoint struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime          int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	CreatedAt      string                 `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TaskId         string                 `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XxhashChecksum string                 `protobuf:"bytes,5,opt,name=xxhash_checksum,json=xxhashChecksum,proto3" json:"xxhash_checksum,omitempty"`
	TimeModified   int64                  `protobuf:"varint,6,opt,name=time_modified,json=timeModified,proto3" json:"time_modified,omitempty"`
	FileSize       int64                  `protobuf:"varint,7,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Comment        string                 `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	Chunks         string                 `protobuf:"bytes,9,opt,name=chunks,proto3" json:"chunks,omitempty"`
	AuthorUid      string                 `protobuf:"bytes,10,opt,name=author_uid,json=authorUid,proto3" json:"author_uid,omitempty"`
	PreviewId      string                 `protobuf:"bytes,11,opt,name=preview_id,json=previewId,proto3" json:"preview_id,omitempty"`
	Trashed        bool                   `protobuf:"varint,12,opt,name=trashed,proto3" json:"trashed,omitempty"`
	Synced         bool                   `protobuf:"varint,13,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	mi := &file_internal_repository_schema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{16}
}

func (x *Checkpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Checkpoint) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Checkpoint) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Checkpoint) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Checkpoint) GetXxhashChecksum() string {
	if x != nil {
		return x.XxhashChecksum
	}
	return ""
}

func (x *Checkpoint) GetTimeModified() int64 {
	if x != nil {
		return x.TimeModified
	}
	return 0
}

func (x *Checkpoint) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Checkpoint) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Checkpoint) GetChunks() string {
	if x != nil {
		return x.Chunks
	}
	return ""
}

func (x *Checkpoint) GetAuthorUid() string {
	if x != nil {
		return x.AuthorUid
	}
	return ""
}

func (x *Checkpoint) GetPreviewId() string {
	if x != nil {
		return x.PreviewId
	}
	return ""
}

func (x *Checkpoint) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *Checkpoint) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Role struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime              int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Synced             bool                   `protobuf:"varint,4,opt,name=synced,proto3" json:"synced,omitempty"`
	ViewEntity         bool                   `protobuf:"varint,5,opt,name=view_entity,json=viewEntity,proto3" json:"view_entity,omitempty"`
	CreateEntity       bool                   `protobuf:"varint,6,opt,name=create_entity,json=createEntity,proto3" json:"create_entity,omitempty"`
	UpdateEntity       bool                   `protobuf:"varint,7,opt,name=update_entity,json=updateEntity,proto3" json:"update_entity,omitempty"`
	DeleteEntity       bool                   `protobuf:"varint,8,opt,name=delete_entity,json=deleteEntity,proto3" json:"delete_entity,omitempty"`
	ViewTask           bool                   `protobuf:"varint,9,opt,name=view_task,json=viewTask,proto3" json:"view_task,omitempty"`
	CreateTask         bool                   `protobuf:"varint,10,opt,name=create_task,json=createTask,proto3" json:"create_task,omitempty"`
	UpdateTask         bool                   `protobuf:"varint,11,opt,name=update_task,json=updateTask,proto3" json:"update_task,omitempty"`
	DeleteTask         bool                   `protobuf:"varint,12,opt,name=delete_task,json=deleteTask,proto3" json:"delete_task,omitempty"`
	ViewTemplate       bool                   `protobuf:"varint,13,opt,name=view_template,json=viewTemplate,proto3" json:"view_template,omitempty"`
	CreateTemplate     bool                   `protobuf:"varint,14,opt,name=create_template,json=createTemplate,proto3" json:"create_template,omitempty"`
	UpdateTemplate     bool                   `protobuf:"varint,15,opt,name=update_template,json=updateTemplate,proto3" json:"update_template,omitempty"`
	DeleteTemplate     bool                   `protobuf:"varint,16,opt,name=delete_template,json=deleteTemplate,proto3" json:"delete_template,omitempty"`
	ViewCheckpoint     bool                   `protobuf:"varint,17,opt,name=view_checkpoint,json=viewCheckpoint,proto3" json:"view_checkpoint,omitempty"`
	CreateCheckpoint   bool                   `protobuf:"varint,18,opt,name=create_checkpoint,json=createCheckpoint,proto3" json:"create_checkpoint,omitempty"`
	DeleteCheckpoint   bool                   `protobuf:"varint,19,opt,name=delete_checkpoint,json=deleteCheckpoint,proto3" json:"delete_checkpoint,omitempty"`
	PullChunk          bool                   `protobuf:"varint,20,opt,name=pull_chunk,json=pullChunk,proto3" json:"pull_chunk,omitempty"`
	AssignTask         bool                   `protobuf:"varint,21,opt,name=assign_task,json=assignTask,proto3" json:"assign_task,omitempty"`
	UnassignTask       bool                   `protobuf:"varint,22,opt,name=unassign_task,json=unassignTask,proto3" json:"unassign_task,omitempty"`
	AddUser            bool                   `protobuf:"varint,23,opt,name=add_user,json=addUser,proto3" json:"add_user,omitempty"`
	RemoveUser         bool                   `protobuf:"varint,24,opt,name=remove_user,json=removeUser,proto3" json:"remove_user,omitempty"`
	ChangeRole         bool                   `protobuf:"varint,25,opt,name=change_role,json=changeRole,proto3" json:"change_role,omitempty"`
	ChangeStatus       bool                   `protobuf:"varint,26,opt,name=change_status,json=changeStatus,proto3" json:"change_status,omitempty"`
	SetDoneTask        bool                   `protobuf:"varint,27,opt,name=set_done_task,json=setDoneTask,proto3" json:"set_done_task,omitempty"`
	SetRetakeTask      bool                   `protobuf:"varint,28,opt,name=set_retake_task,json=setRetakeTask,proto3" json:"set_retake_task,omitempty"`
	ViewDoneTask       bool                   `protobuf:"varint,29,opt,name=view_done_task,json=viewDoneTask,proto3" json:"view_done_task,omitempty"`
	ManageDependencies bool                   `protobuf:"varint,30,opt,name=manage_dependencies,json=manageDependencies,proto3" json:"manage_dependencies,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_internal_repository_schema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{17}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

func (x *Role) GetViewEntity() bool {
	if x != nil {
		return x.ViewEntity
	}
	return false
}

func (x *Role) GetCreateEntity() bool {
	if x != nil {
		return x.CreateEntity
	}
	return false
}

func (x *Role) GetUpdateEntity() bool {
	if x != nil {
		return x.UpdateEntity
	}
	return false
}

func (x *Role) GetDeleteEntity() bool {
	if x != nil {
		return x.DeleteEntity
	}
	return false
}

func (x *Role) GetViewTask() bool {
	if x != nil {
		return x.ViewTask
	}
	return false
}

func (x *Role) GetCreateTask() bool {
	if x != nil {
		return x.CreateTask
	}
	return false
}

func (x *Role) GetUpdateTask() bool {
	if x != nil {
		return x.UpdateTask
	}
	return false
}

func (x *Role) GetDeleteTask() bool {
	if x != nil {
		return x.DeleteTask
	}
	return false
}

func (x *Role) GetViewTemplate() bool {
	if x != nil {
		return x.ViewTemplate
	}
	return false
}

func (x *Role) GetCreateTemplate() bool {
	if x != nil {
		return x.CreateTemplate
	}
	return false
}

func (x *Role) GetUpdateTemplate() bool {
	if x != nil {
		return x.UpdateTemplate
	}
	return false
}

func (x *Role) GetDeleteTemplate() bool {
	if x != nil {
		return x.DeleteTemplate
	}
	return false
}

func (x *Role) GetViewCheckpoint() bool {
	if x != nil {
		return x.ViewCheckpoint
	}
	return false
}

func (x *Role) GetCreateCheckpoint() bool {
	if x != nil {
		return x.CreateCheckpoint
	}
	return false
}

func (x *Role) GetDeleteCheckpoint() bool {
	if x != nil {
		return x.DeleteCheckpoint
	}
	return false
}

func (x *Role) GetPullChunk() bool {
	if x != nil {
		return x.PullChunk
	}
	return false
}

func (x *Role) GetAssignTask() bool {
	if x != nil {
		return x.AssignTask
	}
	return false
}

func (x *Role) GetUnassignTask() bool {
	if x != nil {
		return x.UnassignTask
	}
	return false
}

func (x *Role) GetAddUser() bool {
	if x != nil {
		return x.AddUser
	}
	return false
}

func (x *Role) GetRemoveUser() bool {
	if x != nil {
		return x.RemoveUser
	}
	return false
}

func (x *Role) GetChangeRole() bool {
	if x != nil {
		return x.ChangeRole
	}
	return false
}

func (x *Role) GetChangeStatus() bool {
	if x != nil {
		return x.ChangeStatus
	}
	return false
}

func (x *Role) GetSetDoneTask() bool {
	if x != nil {
		return x.SetDoneTask
	}
	return false
}

func (x *Role) GetSetRetakeTask() bool {
	if x != nil {
		return x.SetRetakeTask
	}
	return false
}

func (x *Role) GetViewDoneTask() bool {
	if x != nil {
		return x.ViewDoneTask
	}
	return false
}

func (x *Role) GetManageDependencies() bool {
	if x != nil {
		return x.ManageDependencies
	}
	return false
}

type UserRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId        string                 `protobuf:"bytes,4,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Synced        bool                   `protobuf:"varint,5,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRole) Reset() {
	*x = UserRole{}
	mi := &file_internal_repository_schema_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRole) ProtoMessage() {}

func (x *UserRole) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRole.ProtoReflect.Descriptor instead.
func (*UserRole) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{18}
}

func (x *UserRole) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserRole) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *UserRole) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *UserRole) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Template struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime          int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Extension      string                 `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	Chunks         string                 `protobuf:"bytes,5,opt,name=chunks,proto3" json:"chunks,omitempty"`
	XxhashChecksum string                 `protobuf:"bytes,6,opt,name=xxhash_checksum,json=xxhashChecksum,proto3" json:"xxhash_checksum,omitempty"`
	FileSize       int64                  `protobuf:"varint,7,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Trashed        bool                   `protobuf:"varint,8,opt,name=trashed,proto3" json:"trashed,omitempty"`
	Synced         bool                   `protobuf:"varint,9,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Template) Reset() {
	*x = Template{}
	mi := &file_internal_repository_schema_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{19}
}

func (x *Template) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Template) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *Template) GetChunks() string {
	if x != nil {
		return x.Chunks
	}
	return ""
}

func (x *Template) GetXxhashChecksum() string {
	if x != nil {
		return x.XxhashChecksum
	}
	return ""
}

func (x *Template) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Template) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *Template) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Preview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Preview       []byte                 `protobuf:"bytes,2,opt,name=preview,proto3" json:"preview,omitempty"`
	Extension     string                 `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Preview) Reset() {
	*x = Preview{}
	mi := &file_internal_repository_schema_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Preview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preview) ProtoMessage() {}

func (x *Preview) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preview.ProtoReflect.Descriptor instead.
func (*Preview) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{20}
}

func (x *Preview) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Preview) GetPreview() []byte {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Preview) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type Tomb struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	TableName     string                 `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Synced        bool                   `protobuf:"varint,4,opt,name=synced,proto3" json:"synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tomb) Reset() {
	*x = Tomb{}
	mi := &file_internal_repository_schema_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tomb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tomb) ProtoMessage() {}

func (x *Tomb) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tomb.ProtoReflect.Descriptor instead.
func (*Tomb) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{21}
}

func (x *Tomb) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tomb) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Tomb) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Tomb) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type ProjectData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProjectPreview     string                 `protobuf:"bytes,1,opt,name=project_preview,json=projectPreview,proto3" json:"project_preview,omitempty"`
	Tasks              []*Task                `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	TaskTypes          []*TaskType            `protobuf:"bytes,3,rep,name=task_types,json=taskTypes,proto3" json:"task_types,omitempty"`
	TasksCheckpoints   []*Checkpoint          `protobuf:"bytes,4,rep,name=tasks_checkpoints,json=tasksCheckpoints,proto3" json:"tasks_checkpoints,omitempty"`
	TaskDependencies   []*TaskDependency      `protobuf:"bytes,5,rep,name=task_dependencies,json=taskDependencies,proto3" json:"task_dependencies,omitempty"`
	EntityDependencies []*EntityDependency    `protobuf:"bytes,6,rep,name=entity_dependencies,json=entityDependencies,proto3" json:"entity_dependencies,omitempty"`
	Statuses           []*Status              `protobuf:"bytes,7,rep,name=statuses,proto3" json:"statuses,omitempty"`
	DependencyTypes    []*DependencyType      `protobuf:"bytes,8,rep,name=dependency_types,json=dependencyTypes,proto3" json:"dependency_types,omitempty"`
	Users              []*User                `protobuf:"bytes,9,rep,name=users,proto3" json:"users,omitempty"`
	Roles              []*Role                `protobuf:"bytes,10,rep,name=roles,proto3" json:"roles,omitempty"`
	EntityTypes        []*EntityType          `protobuf:"bytes,11,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"`
	Entities           []*Entity              `protobuf:"bytes,12,rep,name=entities,proto3" json:"entities,omitempty"`
	EntityAssignees    []*EntityAssignee      `protobuf:"bytes,13,rep,name=entity_assignees,json=entityAssignees,proto3" json:"entity_assignees,omitempty"`
	Templates          []*Template            `protobuf:"bytes,14,rep,name=templates,proto3" json:"templates,omitempty"`
	Tags               []*Tag                 `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	TasksTags          []*TaskTag             `protobuf:"bytes,16,rep,name=tasks_tags,json=tasksTags,proto3" json:"tasks_tags,omitempty"`
	Workflows          []*Workflow            `protobuf:"bytes,17,rep,name=workflows,proto3" json:"workflows,omitempty"`
	WorkflowLinks      []*WorkflowLink        `protobuf:"bytes,18,rep,name=workflow_links,json=workflowLinks,proto3" json:"workflow_links,omitempty"`
	WorkflowEntities   []*WorkflowEntity      `protobuf:"bytes,19,rep,name=workflow_entities,json=workflowEntities,proto3" json:"workflow_entities,omitempty"`
	WorkflowTasks      []*WorkflowTask        `protobuf:"bytes,20,rep,name=workflow_tasks,json=workflowTasks,proto3" json:"workflow_tasks,omitempty"`
	Tomb               []*Tomb                `protobuf:"bytes,21,rep,name=tomb,proto3" json:"tomb,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProjectData) Reset() {
	*x = ProjectData{}
	mi := &file_internal_repository_schema_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectData) ProtoMessage() {}

func (x *ProjectData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectData.ProtoReflect.Descriptor instead.
func (*ProjectData) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{22}
}

func (x *ProjectData) GetProjectPreview() string {
	if x != nil {
		return x.ProjectPreview
	}
	return ""
}

func (x *ProjectData) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ProjectData) GetTaskTypes() []*TaskType {
	if x != nil {
		return x.TaskTypes
	}
	return nil
}

func (x *ProjectData) GetTasksCheckpoints() []*Checkpoint {
	if x != nil {
		return x.TasksCheckpoints
	}
	return nil
}

func (x *ProjectData) GetTaskDependencies() []*TaskDependency {
	if x != nil {
		return x.TaskDependencies
	}
	return nil
}

func (x *ProjectData) GetEntityDependencies() []*EntityDependency {
	if x != nil {
		return x.EntityDependencies
	}
	return nil
}

func (x *ProjectData) GetStatuses() []*Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ProjectData) GetDependencyTypes() []*DependencyType {
	if x != nil {
		return x.DependencyTypes
	}
	return nil
}

func (x *ProjectData) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ProjectData) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ProjectData) GetEntityTypes() []*EntityType {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

func (x *ProjectData) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ProjectData) GetEntityAssignees() []*EntityAssignee {
	if x != nil {
		return x.EntityAssignees
	}
	return nil
}

func (x *ProjectData) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *ProjectData) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProjectData) GetTasksTags() []*TaskTag {
	if x != nil {
		return x.TasksTags
	}
	return nil
}

func (x *ProjectData) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ProjectData) GetWorkflowLinks() []*WorkflowLink {
	if x != nil {
		return x.WorkflowLinks
	}
	return nil
}

func (x *ProjectData) GetWorkflowEntities() []*WorkflowEntity {
	if x != nil {
		return x.WorkflowEntities
	}
	return nil
}

func (x *ProjectData) GetWorkflowTasks() []*WorkflowTask {
	if x != nil {
		return x.WorkflowTasks
	}
	return nil
}

func (x *ProjectData) GetTomb() []*Tomb {
	if x != nil {
		return x.Tomb
	}
	return nil
}

type FullTask struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mtime                 int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	CreatedAt             string                 `protobuf:"bytes,3,opt,name=created_at,proto3" json:"created_at,omitempty"`
	Name                  string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Extension             string                 `protobuf:"bytes,6,opt,name=extension,proto3" json:"extension,omitempty"`
	IsResource            bool                   `protobuf:"varint,7,opt,name=is_resource,proto3" json:"is_resource,omitempty"`
	StatusId              string                 `protobuf:"bytes,8,opt,name=status_id,proto3" json:"status_id,omitempty"`
	StatusShortName       string                 `protobuf:"bytes,9,opt,name=status_short_name,proto3" json:"status_short_name,omitempty"`
	TaskTypeId            string                 `protobuf:"bytes,10,opt,name=task_type_id,proto3" json:"task_type_id,omitempty"`
	TaskTypeName          string                 `protobuf:"bytes,11,opt,name=task_type_name,proto3" json:"task_type_name,omitempty"`
	TaskTypeIcon          string                 `protobuf:"bytes,12,opt,name=task_type_icon,proto3" json:"task_type_icon,omitempty"`
	EntityId              string                 `protobuf:"bytes,13,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityName            string                 `protobuf:"bytes,14,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	EntityPath            string                 `protobuf:"bytes,15,opt,name=entity_path,json=entityPath,proto3" json:"entity_path,omitempty"`
	TaskPath              string                 `protobuf:"bytes,16,opt,name=task_path,json=taskPath,proto3" json:"task_path,omitempty"`
	AssigneeId            string                 `protobuf:"bytes,17,opt,name=assignee_id,json=assigneeId,proto3" json:"assignee_id,omitempty"`
	AssigneeEmail         string                 `protobuf:"bytes,18,opt,name=assignee_email,json=assigneeEmail,proto3" json:"assignee_email,omitempty"`
	AssigneeName          string                 `protobuf:"bytes,19,opt,name=assignee_name,json=assigneeName,proto3" json:"assignee_name,omitempty"`
	AssignerId            string                 `protobuf:"bytes,20,opt,name=assigner_id,json=assignerId,proto3" json:"assigner_id,omitempty"`
	AssignerEmail         string                 `protobuf:"bytes,21,opt,name=assigner_email,json=assignerEmail,proto3" json:"assigner_email,omitempty"`
	AssignerName          string                 `protobuf:"bytes,22,opt,name=assigner_name,json=assignerName,proto3" json:"assigner_name,omitempty"`
	IsDependency          bool                   `protobuf:"varint,23,opt,name=is_dependency,json=isDependency,proto3" json:"is_dependency,omitempty"`
	DependencyLevel       int32                  `protobuf:"varint,24,opt,name=dependency_level,json=dependencyLevel,proto3" json:"dependency_level,omitempty"`
	FilePath              string                 `protobuf:"bytes,25,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Tags                  []string               `protobuf:"bytes,26,rep,name=tags,proto3" json:"tags,omitempty"`
	TagsRaw               string                 `protobuf:"bytes,27,opt,name=tags_raw,json=tagsRaw,proto3" json:"tags_raw,omitempty"`
	EntityDependencies    []string               `protobuf:"bytes,28,rep,name=entity_dependencies,json=entityDependencies,proto3" json:"entity_dependencies,omitempty"`
	EntityDependenciesRaw string                 `protobuf:"bytes,29,opt,name=entity_dependencies_raw,json=entityDependenciesRaw,proto3" json:"entity_dependencies_raw,omitempty"`
	Dependencies          []string               `protobuf:"bytes,30,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	DependenciesRaw       string                 `protobuf:"bytes,31,opt,name=dependencies_raw,json=dependenciesRaw,proto3" json:"dependencies_raw,omitempty"`
	FileStatus            string                 `protobuf:"bytes,32,opt,name=file_status,json=fileStatus,proto3" json:"file_status,omitempty"`
	Status                *Status                `protobuf:"bytes,33,opt,name=status,proto3" json:"status,omitempty"`
	IsLink                bool                   `protobuf:"varint,34,opt,name=is_link,json=isLink,proto3" json:"is_link,omitempty"`
	Pointer               string                 `protobuf:"bytes,35,opt,name=pointer,proto3" json:"pointer,omitempty"`
	PreviewId             string                 `protobuf:"bytes,36,opt,name=preview_id,json=previewId,proto3" json:"preview_id,omitempty"`
	Preview               []byte                 `protobuf:"bytes,37,opt,name=preview,proto3" json:"preview,omitempty"`
	PreviewExtension      string                 `protobuf:"bytes,38,opt,name=preview_extension,json=previewExtension,proto3" json:"preview_extension,omitempty"`
	Checkpoints           []*Checkpoint          `protobuf:"bytes,39,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
	Trashed               bool                   `protobuf:"varint,40,opt,name=trashed,proto3" json:"trashed,omitempty"`
	Synced                bool                   `protobuf:"varint,41,opt,name=synced,proto3" json:"synced,omitempty"`
	Type                  string                 `protobuf:"bytes,42,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FullTask) Reset() {
	*x = FullTask{}
	mi := &file_internal_repository_schema_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTask) ProtoMessage() {}

func (x *FullTask) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTask.ProtoReflect.Descriptor instead.
func (*FullTask) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{23}
}

func (x *FullTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FullTask) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *FullTask) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FullTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FullTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FullTask) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *FullTask) GetIsResource() bool {
	if x != nil {
		return x.IsResource
	}
	return false
}

func (x *FullTask) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *FullTask) GetStatusShortName() string {
	if x != nil {
		return x.StatusShortName
	}
	return ""
}

func (x *FullTask) GetTaskTypeId() string {
	if x != nil {
		return x.TaskTypeId
	}
	return ""
}

func (x *FullTask) GetTaskTypeName() string {
	if x != nil {
		return x.TaskTypeName
	}
	return ""
}

func (x *FullTask) GetTaskTypeIcon() string {
	if x != nil {
		return x.TaskTypeIcon
	}
	return ""
}

func (x *FullTask) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *FullTask) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *FullTask) GetEntityPath() string {
	if x != nil {
		return x.EntityPath
	}
	return ""
}

func (x *FullTask) GetTaskPath() string {
	if x != nil {
		return x.TaskPath
	}
	return ""
}

func (x *FullTask) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *FullTask) GetAssigneeEmail() string {
	if x != nil {
		return x.AssigneeEmail
	}
	return ""
}

func (x *FullTask) GetAssigneeName() string {
	if x != nil {
		return x.AssigneeName
	}
	return ""
}

func (x *FullTask) GetAssignerId() string {
	if x != nil {
		return x.AssignerId
	}
	return ""
}

func (x *FullTask) GetAssignerEmail() string {
	if x != nil {
		return x.AssignerEmail
	}
	return ""
}

func (x *FullTask) GetAssignerName() string {
	if x != nil {
		return x.AssignerName
	}
	return ""
}

func (x *FullTask) GetIsDependency() bool {
	if x != nil {
		return x.IsDependency
	}
	return false
}

func (x *FullTask) GetDependencyLevel() int32 {
	if x != nil {
		return x.DependencyLevel
	}
	return 0
}

func (x *FullTask) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FullTask) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FullTask) GetTagsRaw() string {
	if x != nil {
		return x.TagsRaw
	}
	return ""
}

func (x *FullTask) GetEntityDependencies() []string {
	if x != nil {
		return x.EntityDependencies
	}
	return nil
}

func (x *FullTask) GetEntityDependenciesRaw() string {
	if x != nil {
		return x.EntityDependenciesRaw
	}
	return ""
}

func (x *FullTask) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *FullTask) GetDependenciesRaw() string {
	if x != nil {
		return x.DependenciesRaw
	}
	return ""
}

func (x *FullTask) GetFileStatus() string {
	if x != nil {
		return x.FileStatus
	}
	return ""
}

func (x *FullTask) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FullTask) GetIsLink() bool {
	if x != nil {
		return x.IsLink
	}
	return false
}

func (x *FullTask) GetPointer() string {
	if x != nil {
		return x.Pointer
	}
	return ""
}

func (x *FullTask) GetPreviewId() string {
	if x != nil {
		return x.PreviewId
	}
	return ""
}

func (x *FullTask) GetPreview() []byte {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *FullTask) GetPreviewExtension() string {
	if x != nil {
		return x.PreviewExtension
	}
	return ""
}

func (x *FullTask) GetCheckpoints() []*Checkpoint {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

func (x *FullTask) GetTrashed() bool {
	if x != nil {
		return x.Trashed
	}
	return false
}

func (x *FullTask) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

func (x *FullTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ChunkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	mi := &file_internal_repository_schema_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{24}
}

func (x *ChunkInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ChunkInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FullTaskList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FullTasks     []*FullTask            `protobuf:"bytes,1,rep,name=full_tasks,json=fullTasks,proto3" json:"full_tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullTaskList) Reset() {
	*x = FullTaskList{}
	mi := &file_internal_repository_schema_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTaskList) ProtoMessage() {}

func (x *FullTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTaskList.ProtoReflect.Descriptor instead.
func (*FullTaskList) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{25}
}

func (x *FullTaskList) GetFullTasks() []*FullTask {
	if x != nil {
		return x.FullTasks
	}
	return nil
}

type Previews struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Previews      []*Preview             `protobuf:"bytes,1,rep,name=previews,proto3" json:"previews,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Previews) Reset() {
	*x = Previews{}
	mi := &file_internal_repository_schema_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Previews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Previews) ProtoMessage() {}

func (x *Previews) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Previews.ProtoReflect.Descriptor instead.
func (*Previews) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{26}
}

func (x *Previews) GetPreviews() []*Preview {
	if x != nil {
		return x.Previews
	}
	return nil
}

type ChunkHashes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHashes   []string               `protobuf:"bytes,1,rep,name=chunk_hashes,json=chunkHashes,proto3" json:"chunk_hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkHashes) Reset() {
	*x = ChunkHashes{}
	mi := &file_internal_repository_schema_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkHashes) ProtoMessage() {}

func (x *ChunkHashes) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkHashes.ProtoReflect.Descriptor instead.
func (*ChunkHashes) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{27}
}

func (x *ChunkHashes) GetChunkHashes() []string {
	if x != nil {
		return x.ChunkHashes
	}
	return nil
}

type ChunkInfos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkInfos    []*ChunkInfo           `protobuf:"bytes,1,rep,name=chunk_infos,json=chunkInfos,proto3" json:"chunk_infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkInfos) Reset() {
	*x = ChunkInfos{}
	mi := &file_internal_repository_schema_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfos) ProtoMessage() {}

func (x *ChunkInfos) ProtoReflect() protoreflect.Message {
	mi := &file_internal_repository_schema_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfos.ProtoReflect.Descriptor instead.
func (*ChunkInfos) Descriptor() ([]byte, []int) {
	return file_internal_repository_schema_proto_rawDescGZIP(), []int{28}
}

func (x *ChunkInfos) GetChunkInfos() []*ChunkInfo {
	if x != nil {
		return x.ChunkInfos
	}
	return nil
}

var File_internal_repository_schema_proto protoreflect.FileDescriptor

const file_internal_repository_schema_proto_rawDesc = "" +
	"\n" +
	" internal/repository/schema.proto\x12\n" +
	"repository\"\x90\x02\n" +
	"\x04User\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x19\n" +
	"\badded_at\x18\x03 \x01(\tR\aaddedAt\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x14\n" +
	"\x05email\x18\x05 \x01(\tR\x05email\x12\x1d\n" +
	"\n" +
	"first_name\x18\x06 \x01(\tR\tfirstName\x12\x1b\n" +
	"\tlast_name\x18\a \x01(\tR\blastName\x12\x14\n" +
	"\x05photo\x18\b \x01(\fR\x05photo\x12\x17\n" +
	"\arole_id\x18\t \x01(\tR\x06roleId\x12\x16\n" +
	"\x06synced\x18\n" +
	" \x01(\bR\x06synced\x12\x12\n" +
	"\x04role\x18\v \x01(\tR\x04role\"r\n" +
	"\n" +
	"EntityType\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x04 \x01(\tR\x04icon\x12\x16\n" +
	"\x06synced\x18\x05 \x01(\bR\x06synced\"p\n" +
	"\bTaskType\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x04 \x01(\tR\x04icon\x12\x16\n" +
	"\x06synced\x18\x05 \x01(\bR\x06synced\"\xe2\x03\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1c\n" +
	"\textension\x18\x06 \x01(\tR\textension\x12\x1f\n" +
	"\vis_resource\x18\a \x01(\bR\n" +
	"isResource\x12\x1b\n" +
	"\tstatus_id\x18\b \x01(\tR\bstatusId\x12 \n" +
	"\ftask_type_id\x18\t \x01(\tR\n" +
	"taskTypeId\x12\x1b\n" +
	"\tentity_id\x18\n" +
	" \x01(\tR\bentityId\x12\x1f\n" +
	"\vassignee_id\x18\v \x01(\tR\n" +
	"assigneeId\x12\x1f\n" +
	"\vassigner_id\x18\f \x01(\tR\n" +
	"assignerId\x12\x17\n" +
	"\ais_link\x18\r \x01(\bR\x06isLink\x12\x18\n" +
	"\apointer\x18\x0e \x01(\tR\apointer\x12\x1d\n" +
	"\n" +
	"preview_id\x18\x0f \x01(\tR\tpreviewId\x12\x18\n" +
	"\atrashed\x18\x10 \x01(\bR\atrashed\x12\x16\n" +
	"\x06synced\x18\x11 \x01(\bR\x06synced\"\xd7\x02\n" +
	"\x06Entity\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1f\n" +
	"\ventity_path\x18\x05 \x01(\tR\n" +
	"entityPath\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x18\n" +
	"\atrashed\x18\a \x01(\bR\atrashed\x12$\n" +
	"\x0eentity_type_id\x18\b \x01(\tR\fentityTypeId\x12\x1b\n" +
	"\tparent_id\x18\t \x01(\tR\bparentId\x12\x1d\n" +
	"\n" +
	"preview_id\x18\n" +
	" \x01(\tR\tpreviewId\x12\x16\n" +
	"\x06synced\x18\v \x01(\bR\x06synced\x12\x1d\n" +
	"\n" +
	"is_library\x18\f \x01(\bR\tisLibrary\"\xad\x01\n" +
	"\x0eEntityAssignee\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x1b\n" +
	"\tentity_id\x18\x03 \x01(\tR\bentityId\x12\x1f\n" +
	"\vassignee_id\x18\x04 \x01(\tR\n" +
	"assigneeId\x12\x1f\n" +
	"\vassigner_id\x18\x05 \x01(\tR\n" +
	"assignerId\x12\x16\n" +
	"\x06synced\x18\x06 \x01(\bR\x06synced\"\xba\x01\n" +
	"\x0eTaskDependency\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\x12#\n" +
	"\rdependency_id\x18\x04 \x01(\tR\fdependencyId\x12,\n" +
	"\x12dependency_type_id\x18\x05 \x01(\tR\x10dependencyTypeId\x12\x16\n" +
	"\x06synced\x18\x06 \x01(\bR\x06synced\"\xbc\x01\n" +
	"\x10EntityDependency\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\x12#\n" +
	"\rdependency_id\x18\x04 \x01(\tR\fdependencyId\x12,\n" +
	"\x12dependency_type_id\x18\x05 \x01(\tR\x10dependencyTypeId\x12\x16\n" +
	"\x06synced\x18\x06 \x01(\bR\x06synced\"\\\n" +
	"\bWorkflow\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06synced\x18\x04 \x01(\bR\x06synced\"\xc6\x02\n" +
	"\fWorkflowTask\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1f\n" +
	"\vtemplate_id\x18\x04 \x01(\tR\n" +
	"templateId\x12\x1f\n" +
	"\vis_resource\x18\x05 \x01(\bR\n" +
	"isResource\x12\x1f\n" +
	"\vworkflow_id\x18\x06 \x01(\tR\n" +
	"workflowId\x12 \n" +
	"\ftask_type_id\x18\a \x01(\tR\n" +
	"taskTypeId\x12,\n" +
	"\x12workflow_entity_id\x18\b \x01(\tR\x10workflowEntityId\x12\x17\n" +
	"\ais_link\x18\t \x01(\bR\x06isLink\x12\x18\n" +
	"\apointer\x18\n" +
	" \x01(\tR\apointer\x12\x16\n" +
	"\x06synced\x18\v \x01(\bR\x06synced\"\xc6\x01\n" +
	"\x0eWorkflowEntity\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1f\n" +
	"\vworkflow_id\x18\x04 \x01(\tR\n" +
	"workflowId\x12$\n" +
	"\x0eentity_type_id\x18\x05 \x01(\tR\fentityTypeId\x12\x1b\n" +
	"\tparent_id\x18\x06 \x01(\tR\bparentId\x12\x16\n" +
	"\x06synced\x18\a \x01(\bR\x06synced\"\x87\x02\n" +
	"\fWorkflowLink\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12$\n" +
	"\x0eentity_type_id\x18\x04 \x01(\tR\fentityTypeId\x12\x1f\n" +
	"\vworkflow_id\x18\x05 \x01(\tR\n" +
	"workflowId\x12,\n" +
	"\x12linked_workflow_id\x18\x06 \x01(\tR\x10linkedWorkflowId\x120\n" +
	"\x14linked_workflow_name\x18\a \x01(\tR\x12linkedWorkflowName\x12\x16\n" +
	"\x06synced\x18\b \x01(\bR\x06synced\"b\n" +
	"\x0eDependencyType\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06synced\x18\x04 \x01(\bR\x06synced\"\x8f\x01\n" +
	"\x06Status\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"short_name\x18\x04 \x01(\tR\tshortName\x12\x14\n" +
	"\x05color\x18\x05 \x01(\tR\x05color\x12\x16\n" +
	"\x06synced\x18\x06 \x01(\bR\x06synced\"W\n" +
	"\x03Tag\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06synced\x18\x04 \x01(\bR\x06synced\"w\n" +
	"\aTaskTag\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\x12\x15\n" +
	"\x06tag_id\x18\x04 \x01(\tR\x05tagId\x12\x16\n" +
	"\x06synced\x18\x05 \x01(\bR\x06synced\"\xf7\x02\n" +
	"\n" +
	"Checkpoint\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x17\n" +
	"\atask_id\x18\x04 \x01(\tR\x06taskId\x12'\n" +
	"\x0fxxhash_checksum\x18\x05 \x01(\tR\x0exxhashChecksum\x12#\n" +
	"\rtime_modified\x18\x06 \x01(\x03R\ftimeModified\x12\x1b\n" +
	"\tfile_size\x18\a \x01(\x03R\bfileSize\x12\x18\n" +
	"\acomment\x18\b \x01(\tR\acomment\x12\x16\n" +
	"\x06chunks\x18\t \x01(\tR\x06chunks\x12\x1d\n" +
	"\n" +
	"author_uid\x18\n" +
	" \x01(\tR\tauthorUid\x12\x1d\n" +
	"\n" +
	"preview_id\x18\v \x01(\tR\tpreviewId\x12\x18\n" +
	"\atrashed\x18\f \x01(\bR\atrashed\x12\x16\n" +
	"\x06synced\x18\r \x01(\bR\x06synced\"\x95\b\n" +
	"\x04Role\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06synced\x18\x04 \x01(\bR\x06synced\x12\x1f\n" +
	"\vview_entity\x18\x05 \x01(\bR\n" +
	"viewEntity\x12#\n" +
	"\rcreate_entity\x18\x06 \x01(\bR\fcreateEntity\x12#\n" +
	"\rupdate_entity\x18\a \x01(\bR\fupdateEntity\x12#\n" +
	"\rdelete_entity\x18\b \x01(\bR\fdeleteEntity\x12\x1b\n" +
	"\tview_task\x18\t \x01(\bR\bviewTask\x12\x1f\n" +
	"\vcreate_task\x18\n" +
	" \x01(\bR\n" +
	"createTask\x12\x1f\n" +
	"\vupdate_task\x18\v \x01(\bR\n" +
	"updateTask\x12\x1f\n" +
	"\vdelete_task\x18\f \x01(\bR\n" +
	"deleteTask\x12#\n" +
	"\rview_template\x18\r \x01(\bR\fviewTemplate\x12'\n" +
	"\x0fcreate_template\x18\x0e \x01(\bR\x0ecreateTemplate\x12'\n" +
	"\x0fupdate_template\x18\x0f \x01(\bR\x0eupdateTemplate\x12'\n" +
	"\x0fdelete_template\x18\x10 \x01(\bR\x0edeleteTemplate\x12'\n" +
	"\x0fview_checkpoint\x18\x11 \x01(\bR\x0eviewCheckpoint\x12+\n" +
	"\x11create_checkpoint\x18\x12 \x01(\bR\x10createCheckpoint\x12+\n" +
	"\x11delete_checkpoint\x18\x13 \x01(\bR\x10deleteCheckpoint\x12\x1d\n" +
	"\n" +
	"pull_chunk\x18\x14 \x01(\bR\tpullChunk\x12\x1f\n" +
	"\vassign_task\x18\x15 \x01(\bR\n" +
	"assignTask\x12#\n" +
	"\runassign_task\x18\x16 \x01(\bR\funassignTask\x12\x19\n" +
	"\badd_user\x18\x17 \x01(\bR\aaddUser\x12\x1f\n" +
	"\vremove_user\x18\x18 \x01(\bR\n" +
	"removeUser\x12\x1f\n" +
	"\vchange_role\x18\x19 \x01(\bR\n" +
	"changeRole\x12#\n" +
	"\rchange_status\x18\x1a \x01(\bR\fchangeStatus\x12\"\n" +
	"\rset_done_task\x18\x1b \x01(\bR\vsetDoneTask\x12&\n" +
	"\x0fset_retake_task\x18\x1c \x01(\bR\rsetRetakeTask\x12$\n" +
	"\x0eview_done_task\x18\x1d \x01(\bR\fviewDoneTask\x12/\n" +
	"\x13manage_dependencies\x18\x1e \x01(\bR\x12manageDependencies\"z\n" +
	"\bUserRole\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x17\n" +
	"\arole_id\x18\x04 \x01(\tR\x06roleId\x12\x16\n" +
	"\x06synced\x18\x05 \x01(\bR\x06synced\"\xf2\x01\n" +
	"\bTemplate\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1c\n" +
	"\textension\x18\x04 \x01(\tR\textension\x12\x16\n" +
	"\x06chunks\x18\x05 \x01(\tR\x06chunks\x12'\n" +
	"\x0fxxhash_checksum\x18\x06 \x01(\tR\x0exxhashChecksum\x12\x1b\n" +
	"\tfile_size\x18\a \x01(\x03R\bfileSize\x12\x18\n" +
	"\atrashed\x18\b \x01(\bR\atrashed\x12\x16\n" +
	"\x06synced\x18\t \x01(\bR\x06synced\"U\n" +
	"\aPreview\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x18\n" +
	"\apreview\x18\x02 \x01(\fR\apreview\x12\x1c\n" +
	"\textension\x18\x03 \x01(\tR\textension\"c\n" +
	"\x04Tomb\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x1d\n" +
	"\n" +
	"table_name\x18\x03 \x01(\tR\ttableName\x12\x16\n" +
	"\x06synced\x18\x04 \x01(\bR\x06synced\"\x9b\t\n" +
	"\vProjectData\x12'\n" +
	"\x0fproject_preview\x18\x01 \x01(\tR\x0eprojectPreview\x12&\n" +
	"\x05tasks\x18\x02 \x03(\v2\x10.repository.TaskR\x05tasks\x123\n" +
	"\n" +
	"task_types\x18\x03 \x03(\v2\x14.repository.TaskTypeR\ttaskTypes\x12C\n" +
	"\x11tasks_checkpoints\x18\x04 \x03(\v2\x16.repository.CheckpointR\x10tasksCheckpoints\x12G\n" +
	"\x11task_dependencies\x18\x05 \x03(\v2\x1a.repository.TaskDependencyR\x10taskDependencies\x12M\n" +
	"\x13entity_dependencies\x18\x06 \x03(\v2\x1c.repository.EntityDependencyR\x12entityDependencies\x12.\n" +
	"\bstatuses\x18\a \x03(\v2\x12.repository.StatusR\bstatuses\x12E\n" +
	"\x10dependency_types\x18\b \x03(\v2\x1a.repository.DependencyTypeR\x0fdependencyTypes\x12&\n" +
	"\x05users\x18\t \x03(\v2\x10.repository.UserR\x05users\x12&\n" +
	"\x05roles\x18\n" +
	" \x03(\v2\x10.repository.RoleR\x05roles\x129\n" +
	"\fentity_types\x18\v \x03(\v2\x16.repository.EntityTypeR\ventityTypes\x12.\n" +
	"\bentities\x18\f \x03(\v2\x12.repository.EntityR\bentities\x12E\n" +
	"\x10entity_assignees\x18\r \x03(\v2\x1a.repository.EntityAssigneeR\x0fentityAssignees\x122\n" +
	"\ttemplates\x18\x0e \x03(\v2\x14.repository.TemplateR\ttemplates\x12#\n" +
	"\x04tags\x18\x0f \x03(\v2\x0f.repository.TagR\x04tags\x122\n" +
	"\n" +
	"tasks_tags\x18\x10 \x03(\v2\x13.repository.TaskTagR\ttasksTags\x122\n" +
	"\tworkflows\x18\x11 \x03(\v2\x14.repository.WorkflowR\tworkflows\x12?\n" +
	"\x0eworkflow_links\x18\x12 \x03(\v2\x18.repository.WorkflowLinkR\rworkflowLinks\x12G\n" +
	"\x11workflow_entities\x18\x13 \x03(\v2\x1a.repository.WorkflowEntityR\x10workflowEntities\x12?\n" +
	"\x0eworkflow_tasks\x18\x14 \x03(\v2\x18.repository.WorkflowTaskR\rworkflowTasks\x12$\n" +
	"\x04tomb\x18\x15 \x03(\v2\x10.repository.TombR\x04tomb\"\x96\v\n" +
	"\bFullTask\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05mtime\x18\x02 \x01(\x03R\x05mtime\x12\x1e\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\n" +
	"created_at\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1c\n" +
	"\textension\x18\x06 \x01(\tR\textension\x12 \n" +
	"\vis_resource\x18\a \x01(\bR\vis_resource\x12\x1c\n" +
	"\tstatus_id\x18\b \x01(\tR\tstatus_id\x12,\n" +
	"\x11status_short_name\x18\t \x01(\tR\x11status_short_name\x12\"\n" +
	"\ftask_type_id\x18\n" +
	" \x01(\tR\ftask_type_id\x12&\n" +
	"\x0etask_type_name\x18\v \x01(\tR\x0etask_type_name\x12&\n" +
	"\x0etask_type_icon\x18\f \x01(\tR\x0etask_type_icon\x12\x1b\n" +
	"\tentity_id\x18\r \x01(\tR\bentityId\x12\x1f\n" +
	"\ventity_name\x18\x0e \x01(\tR\n" +
	"entityName\x12\x1f\n" +
	"\ventity_path\x18\x0f \x01(\tR\n" +
	"entityPath\x12\x1b\n" +
	"\ttask_path\x18\x10 \x01(\tR\btaskPath\x12\x1f\n" +
	"\vassignee_id\x18\x11 \x01(\tR\n" +
	"assigneeId\x12%\n" +
	"\x0eassignee_email\x18\x12 \x01(\tR\rassigneeEmail\x12#\n" +
	"\rassignee_name\x18\x13 \x01(\tR\fassigneeName\x12\x1f\n" +
	"\vassigner_id\x18\x14 \x01(\tR\n" +
	"assignerId\x12%\n" +
	"\x0eassigner_email\x18\x15 \x01(\tR\rassignerEmail\x12#\n" +
	"\rassigner_name\x18\x16 \x01(\tR\fassignerName\x12#\n" +
	"\ris_dependency\x18\x17 \x01(\bR\fisDependency\x12)\n" +
	"\x10dependency_level\x18\x18 \x01(\x05R\x0fdependencyLevel\x12\x1b\n" +
	"\tfile_path\x18\x19 \x01(\tR\bfilePath\x12\x12\n" +
	"\x04tags\x18\x1a \x03(\tR\x04tags\x12\x19\n" +
	"\btags_raw\x18\x1b \x01(\tR\atagsRaw\x12/\n" +
	"\x13entity_dependencies\x18\x1c \x03(\tR\x12entityDependencies\x126\n" +
	"\x17entity_dependencies_raw\x18\x1d \x01(\tR\x15entityDependenciesRaw\x12\"\n" +
	"\fdependencies\x18\x1e \x03(\tR\fdependencies\x12)\n" +
	"\x10dependencies_raw\x18\x1f \x01(\tR\x0fdependenciesRaw\x12\x1f\n" +
	"\vfile_status\x18  \x01(\tR\n" +
	"fileStatus\x12*\n" +
	"\x06status\x18! \x01(\v2\x12.repository.StatusR\x06status\x12\x17\n" +
	"\ais_link\x18\" \x01(\bR\x06isLink\x12\x18\n" +
	"\apointer\x18# \x01(\tR\apointer\x12\x1d\n" +
	"\n" +
	"preview_id\x18$ \x01(\tR\tpreviewId\x12\x18\n" +
	"\apreview\x18% \x01(\fR\apreview\x12+\n" +
	"\x11preview_extension\x18& \x01(\tR\x10previewExtension\x128\n" +
	"\vcheckpoints\x18' \x03(\v2\x16.repository.CheckpointR\vcheckpoints\x12\x18\n" +
	"\atrashed\x18( \x01(\bR\atrashed\x12\x16\n" +
	"\x06synced\x18) \x01(\bR\x06synced\x12\x12\n" +
	"\x04type\x18* \x01(\tR\x04type\"3\n" +
	"\tChunkInfo\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\tR\x04hash\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\"C\n" +
	"\fFullTaskList\x123\n" +
	"\n" +
	"full_tasks\x18\x01 \x03(\v2\x14.repository.FullTaskR\tfullTasks\";\n" +
	"\bPreviews\x12/\n" +
	"\bpreviews\x18\x01 \x03(\v2\x13.repository.PreviewR\bpreviews\"0\n" +
	"\vChunkHashes\x12!\n" +
	"\fchunk_hashes\x18\x01 \x03(\tR\vchunkHashes\"D\n" +
	"\n" +
	"ChunkInfos\x126\n" +
	"\vchunk_infos\x18\x01 \x03(\v2\x15.repository.ChunkInfoR\n" +
	"chunkInfosB\"Z internal/repository/repositorypbb\x06proto3"

var (
	file_internal_repository_schema_proto_rawDescOnce sync.Once
	file_internal_repository_schema_proto_rawDescData []byte
)

func file_internal_repository_schema_proto_rawDescGZIP() []byte {
	file_internal_repository_schema_proto_rawDescOnce.Do(func() {
		file_internal_repository_schema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_repository_schema_proto_rawDesc), len(file_internal_repository_schema_proto_rawDesc)))
	})
	return file_internal_repository_schema_proto_rawDescData
}

var file_internal_repository_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_internal_repository_schema_proto_goTypes = []any{
	(*User)(nil),             // 0: repository.User
	(*EntityType)(nil),       // 1: repository.EntityType
	(*TaskType)(nil),         // 2: repository.TaskType
	(*Task)(nil),             // 3: repository.Task
	(*Entity)(nil),           // 4: repository.Entity
	(*EntityAssignee)(nil),   // 5: repository.EntityAssignee
	(*TaskDependency)(nil),   // 6: repository.TaskDependency
	(*EntityDependency)(nil), // 7: repository.EntityDependency
	(*Workflow)(nil),         // 8: repository.Workflow
	(*WorkflowTask)(nil),     // 9: repository.WorkflowTask
	(*WorkflowEntity)(nil),   // 10: repository.WorkflowEntity
	(*WorkflowLink)(nil),     // 11: repository.WorkflowLink
	(*DependencyType)(nil),   // 12: repository.DependencyType
	(*Status)(nil),           // 13: repository.Status
	(*Tag)(nil),              // 14: repository.Tag
	(*TaskTag)(nil),          // 15: repository.TaskTag
	(*Checkpoint)(nil),       // 16: repository.Checkpoint
	(*Role)(nil),             // 17: repository.Role
	(*UserRole)(nil),         // 18: repository.UserRole
	(*Template)(nil),         // 19: repository.Template
	(*Preview)(nil),          // 20: repository.Preview
	(*Tomb)(nil),             // 21: repository.Tomb
	(*ProjectData)(nil),      // 22: repository.ProjectData
	(*FullTask)(nil),         // 23: repository.FullTask
	(*ChunkInfo)(nil),        // 24: repository.ChunkInfo
	(*FullTaskList)(nil),     // 25: repository.FullTaskList
	(*Previews)(nil),         // 26: repository.Previews
	(*ChunkHashes)(nil),      // 27: repository.ChunkHashes
	(*ChunkInfos)(nil),       // 28: repository.ChunkInfos
}
var file_internal_repository_schema_proto_depIdxs = []int32{
	3,  // 0: repository.ProjectData.tasks:type_name -> repository.Task
	2,  // 1: repository.ProjectData.task_types:type_name -> repository.TaskType
	16, // 2: repository.ProjectData.tasks_checkpoints:type_name -> repository.Checkpoint
	6,  // 3: repository.ProjectData.task_dependencies:type_name -> repository.TaskDependency
	7,  // 4: repository.ProjectData.entity_dependencies:type_name -> repository.EntityDependency
	13, // 5: repository.ProjectData.statuses:type_name -> repository.Status
	12, // 6: repository.ProjectData.dependency_types:type_name -> repository.DependencyType
	0,  // 7: repository.ProjectData.users:type_name -> repository.User
	17, // 8: repository.ProjectData.roles:type_name -> repository.Role
	1,  // 9: repository.ProjectData.entity_types:type_name -> repository.EntityType
	4,  // 10: repository.ProjectData.entities:type_name -> repository.Entity
	5,  // 11: repository.ProjectData.entity_assignees:type_name -> repository.EntityAssignee
	19, // 12: repository.ProjectData.templates:type_name -> repository.Template
	14, // 13: repository.ProjectData.tags:type_name -> repository.Tag
	15, // 14: repository.ProjectData.tasks_tags:type_name -> repository.TaskTag
	8,  // 15: repository.ProjectData.workflows:type_name -> repository.Workflow
	11, // 16: repository.ProjectData.workflow_links:type_name -> repository.WorkflowLink
	10, // 17: repository.ProjectData.workflow_entities:type_name -> repository.WorkflowEntity
	9,  // 18: repository.ProjectData.workflow_tasks:type_name -> repository.WorkflowTask
	21, // 19: repository.ProjectData.tomb:type_name -> repository.Tomb
	13, // 20: repository.FullTask.status:type_name -> repository.Status
	16, // 21: repository.FullTask.checkpoints:type_name -> repository.Checkpoint
	23, // 22: repository.FullTaskList.full_tasks:type_name -> repository.FullTask
	20, // 23: repository.Previews.previews:type_name -> repository.Preview
	24, // 24: repository.ChunkInfos.chunk_infos:type_name -> repository.ChunkInfo
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_internal_repository_schema_proto_init() }
func file_internal_repository_schema_proto_init() {
	if File_internal_repository_schema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_repository_schema_proto_rawDesc), len(file_internal_repository_schema_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_repository_schema_proto_goTypes,
		DependencyIndexes: file_internal_repository_schema_proto_depIdxs,
		MessageInfos:      file_internal_repository_schema_proto_msgTypes,
	}.Build()
	File_internal_repository_schema_proto = out.File
	file_internal_repository_schema_proto_goTypes = nil
	file_internal_repository_schema_proto_depIdxs = nil
}
